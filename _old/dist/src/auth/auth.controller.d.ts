import { AuthService } from './auth.service';
import { RegisterDto } from './dto/register.dto';
import { LoginDto } from './dto/login.dto';
export declare class AuthController {
    private readonly authService;
    constructor(authService: AuthService);
    register(registerDto: RegisterDto): Promise<{
        message: string;
        user: {
            id: string;
            name: string;
            phone: string;
            email: string;
            role_id: string;
            role: import("../roles/entities/role.entity").Role;
            district: string;
            lat: number;
            lng: number;
            availability: string;
            created_at: Date;
            updated_at: Date;
            responderProfiles: import("../responder-profiles/entities/responder-profile.entity").ResponderProfile[];
            emergencyReports: import("../emergency-reports/entities/emergency-report.entity").EmergencyReport[];
            reportStatusHistories: import("../report-status-history/entities/report-status-history.entity").ReportStatusHistory[];
            notifications: import("../notifications/entities/notification.entity").Notification[];
            messages: import("../messages/entities/message.entity").Message[];
            organizedThreads: import("../threads/entities/thread.entity").Thread[];
            incidentLogs: import("../incident-logs/entities/incident-log.entity").IncidentLog[];
            auditLogs: import("../audit-logs/entities/audit-log.entity").AuditLog[];
            feedbacks: import("../feedback/entities/feedback.entity").Feedback[];
            communityPosts: import("../community-posts/entities/community-post.entity").CommunityPost[];
            postComments: import("../post-comments/entities/post-comment.entity").PostComment[];
            postLikes: import("../post-likes/entities/post-like.entity").PostLike[];
            organizedEvents: import("../events/entities/event.entity").Event[];
            uploadedResources: import("../resources/entities/resource.entity").Resource[];
            subscriptions: import("../subscriptions/entities/subscription.entity").Subscription[];
        };
        access_token: string;
    }>;
    login(loginDto: LoginDto): Promise<{
        message: string;
        user: {
            id: string;
            name: string;
            phone: string;
            email: string;
            role_id: string;
            role: import("../roles/entities/role.entity").Role;
            district: string;
            lat: number;
            lng: number;
            availability: string;
            created_at: Date;
            updated_at: Date;
            responderProfiles: import("../responder-profiles/entities/responder-profile.entity").ResponderProfile[];
            emergencyReports: import("../emergency-reports/entities/emergency-report.entity").EmergencyReport[];
            reportStatusHistories: import("../report-status-history/entities/report-status-history.entity").ReportStatusHistory[];
            notifications: import("../notifications/entities/notification.entity").Notification[];
            messages: import("../messages/entities/message.entity").Message[];
            organizedThreads: import("../threads/entities/thread.entity").Thread[];
            incidentLogs: import("../incident-logs/entities/incident-log.entity").IncidentLog[];
            auditLogs: import("../audit-logs/entities/audit-log.entity").AuditLog[];
            feedbacks: import("../feedback/entities/feedback.entity").Feedback[];
            communityPosts: import("../community-posts/entities/community-post.entity").CommunityPost[];
            postComments: import("../post-comments/entities/post-comment.entity").PostComment[];
            postLikes: import("../post-likes/entities/post-like.entity").PostLike[];
            organizedEvents: import("../events/entities/event.entity").Event[];
            uploadedResources: import("../resources/entities/resource.entity").Resource[];
            subscriptions: import("../subscriptions/entities/subscription.entity").Subscription[];
        };
        access_token: string;
    }>;
    getProfile(req: any): Promise<{
        id: string;
        name: string;
        phone: string;
        email: string;
        role_id: string;
        role: import("../roles/entities/role.entity").Role;
        district: string;
        lat: number;
        lng: number;
        availability: string;
        created_at: Date;
        updated_at: Date;
        responderProfiles: import("../responder-profiles/entities/responder-profile.entity").ResponderProfile[];
        emergencyReports: import("../emergency-reports/entities/emergency-report.entity").EmergencyReport[];
        reportStatusHistories: import("../report-status-history/entities/report-status-history.entity").ReportStatusHistory[];
        notifications: import("../notifications/entities/notification.entity").Notification[];
        messages: import("../messages/entities/message.entity").Message[];
        organizedThreads: import("../threads/entities/thread.entity").Thread[];
        incidentLogs: import("../incident-logs/entities/incident-log.entity").IncidentLog[];
        auditLogs: import("../audit-logs/entities/audit-log.entity").AuditLog[];
        feedbacks: import("../feedback/entities/feedback.entity").Feedback[];
        communityPosts: import("../community-posts/entities/community-post.entity").CommunityPost[];
        postComments: import("../post-comments/entities/post-comment.entity").PostComment[];
        postLikes: import("../post-likes/entities/post-like.entity").PostLike[];
        organizedEvents: import("../events/entities/event.entity").Event[];
        uploadedResources: import("../resources/entities/resource.entity").Resource[];
        subscriptions: import("../subscriptions/entities/subscription.entity").Subscription[];
    }>;
    logout(): Promise<{
        message: string;
    }>;
}
